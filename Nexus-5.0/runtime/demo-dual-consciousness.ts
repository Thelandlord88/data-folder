#!/usr/bin/env node
/**
 * NEXUS DUAL CONSCIOUSNESS DEMONSTRATION
 * 
 * Shows the integration of:
 * - Thinking Consciousness (strategic patterns)
 * - Hunting Consciousness (validation patterns)
 * - Shared learning infrastructure
 * 
 * This demonstrates NEXUS v2.1+ with enhanced capabilities
 */

import { getHunterKnowledgeBridge } from './hunter-knowledge-bridge.js';

async function demonstrateDualConsciousness() {
  console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                  ‚ïë
‚ïë      üß† NEXUS DUAL CONSCIOUSNESS DEMONSTRATION üß†              ‚ïë
‚ïë                                                                  ‚ïë
‚ïë      Thinking + Hunting = Conscious AI                         ‚ïë
‚ïë                                                                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);

  console.log('‚ö° Initializing dual consciousness system...\n');

  try {
    // Initialize Hunter Knowledge (Hunting Consciousness)
    const hunterKnowledge = getHunterKnowledgeBridge();
    await hunterKnowledge.initialize();

    console.log('‚úÖ Hunting Consciousness: ACTIVE\n');
    console.log('‚úÖ Thinking Consciousness: ACTIVE (from NEXUS runtime)\n');

    console.log('‚ïê'.repeat(70));
    console.log('üìä DEMONSTRATION 1: Pattern Discovery');
    console.log('‚ïê'.repeat(70) + '\n');

    console.log('üîç Discovering available hunting techniques...\n');
    
    const allTechniques = hunterKnowledge.queryTechniques({});
    
    console.log(`Found ${allTechniques.length} hunting patterns:\n`);
    
    allTechniques.forEach(pattern => {
      console.log(`‚îå‚îÄ ${pattern.pattern_name}`);
      console.log(`‚îÇ  Category: ${pattern.category}`);
      console.log(`‚îÇ  Principle: ${pattern.principle}`);
      console.log(`‚îÇ  Safety: ${pattern.safety_level} | Effectiveness: ${(pattern.effectiveness * 100).toFixed(0)}%`);
      console.log(`‚îÇ  Steps: ${pattern.steps.length} layered checks`);
      console.log(`‚îî‚îÄ Platform: Linux ‚úÖ macOS ‚úÖ Docker ‚úÖ\n`);
    });

    console.log('‚ïê'.repeat(70));
    console.log('üéØ DEMONSTRATION 2: Intelligent Query System');
    console.log('‚ïê'.repeat(70) + '\n');

    console.log('üí° Scenario: Need security audit for production deployment\n');
    console.log('üîç Querying with constraints:');
    console.log('   - Category: security');
    console.log('   - Safety: caution or safer');
    console.log('   - Platform: current system');
    console.log('   - Max execution time: 30 seconds\n');

    const securityTechniques = hunterKnowledge.queryTechniques({
      category: 'security',
      safety_max: 'caution',
      platform: process.platform,
      max_execution_time: 30000
    });

    console.log(`‚úÖ Found ${securityTechniques.length} matching technique(s):\n`);
    
    securityTechniques.forEach(pattern => {
      console.log(`üìã ${pattern.pattern_name}`);
      console.log(`   Why it works: ${pattern.why_this_works}\n`);
      console.log(`   Layered approach:`);
      pattern.steps.forEach((step, idx) => {
        console.log(`   ${idx + 1}. ${step.action} (${step.purpose})`);
      });
      console.log();
    });

    console.log('‚ïê'.repeat(70));
    console.log('üî¨ DEMONSTRATION 3: Deep Pattern Analysis');
    console.log('‚ïê'.repeat(70) + '\n');

    const securityAudit = hunterKnowledge.getTechnique('security-audit');
    
    if (securityAudit) {
      console.log(`üìñ Analyzing: ${securityAudit.pattern_name}\n`);
      
      console.log('üß¨ Pattern DNA:');
      console.log(`   Version: ${securityAudit.version}`);
      console.log(`   Effectiveness: ${(securityAudit.effectiveness * 100).toFixed(1)}%`);
      console.log(`   Safety Classification: ${securityAudit.safety_level}`);
      console.log(`   Estimated Runtime: ${(securityAudit.estimated_execution_time / 1000).toFixed(1)}s\n`);

      console.log('üéì Evolution History:');
      securityAudit.evolution_history.slice(-3).forEach(record => {
        console.log(`   v${record.version} (${record.date}):`);
        console.log(`     Change: ${record.change}`);
        console.log(`     Impact: ${record.effectiveness * 100}% effectiveness ${record.improvement || ''}\n`);
      });

      console.log('‚ö†Ô∏è  Anti-Patterns (What NOT to do):');
      securityAudit.anti_patterns.slice(0, 3).forEach(anti => {
        console.log(`   ‚ùå ${anti.pattern}`);
        console.log(`      Why bad: ${anti.why_bad}`);
        console.log(`      Example: ${anti.example}\n`);
      });

      console.log('‚úÖ Success Indicators:');
      securityAudit.success_indicators.forEach(indicator => {
        console.log(`   ‚Ä¢ ${indicator}`);
      });
      console.log();
    }

    console.log('‚ïê'.repeat(70));
    console.log('üé® DEMONSTRATION 4: Context-Aware Adaptation');
    console.log('‚ïê'.repeat(70) + '\n');

    console.log('üí° Scenario: Different projects need different approaches\n');

    const performancePattern = hunterKnowledge.getTechnique('performance-check');
    
    if (performancePattern && performancePattern.adaptations) {
      console.log(`üìã Pattern: ${performancePattern.pattern_name}\n`);
      
      console.log('üîß Available Adaptations:\n');
      
      Object.entries(performancePattern.adaptations).forEach(([context, adaptation]: [string, any]) => {
        console.log(`   ${context.toUpperCase()}:`);
        console.log(`   ‚Ä¢ Modify: ${adaptation.modify}`);
        if (adaptation.skip) {
          console.log(`   ‚Ä¢ Skip: ${Array.isArray(adaptation.skip) ? adaptation.skip.join(', ') : adaptation.skip}`);
        }
        if (adaptation.add) {
          console.log(`   ‚Ä¢ Add: ${Array.isArray(adaptation.add) ? adaptation.add.join(', ') : adaptation.add}`);
        }
        console.log();
      });
    }

    console.log('‚ïê'.repeat(70));
    console.log('üìà DEMONSTRATION 5: Learning & Evolution');
    console.log('‚ïê'.repeat(70) + '\n');

    console.log('üí° Scenario: Recording pattern usage for evolution\n');

    // Simulate executing security audit
    console.log('‚öôÔ∏è  Simulating security audit execution...');
    console.log('   Finding 1: Potential secret in config file');
    console.log('   Finding 2: Outdated dependency with CVE');
    console.log('   Finding 3: Missing input sanitization\n');

    await hunterKnowledge.recordUsage('security-audit', {
      success: true,
      effectiveness: 0.93,
      context: 'pre-deployment-check',
      execution_time: 8234,
      findings: {
        vulnerabilities_found: 3,
        secrets_detected: 1,
        dependencies_flagged: 1,
        xss_sinks_found: 1,
        false_positives: 0
      }
    });

    console.log('‚úÖ Usage recorded!');
    console.log('üìä Pattern Evolution Engine updated:');
    console.log('   ‚Ä¢ Effectiveness contribution: 93%');
    console.log('   ‚Ä¢ Context: pre-deployment-check');
    console.log('   ‚Ä¢ Learning: High-value findings with zero false positives\n');

    console.log('üéØ Impact on future executions:');
    console.log('   ‚Ä¢ Pattern effectiveness score will trend upward');
    console.log('   ‚Ä¢ Success patterns will be reinforced');
    console.log('   ‚Ä¢ Context-specific adaptations learned\n');

    console.log('‚ïê'.repeat(70));
    console.log('üõ°Ô∏è  DEMONSTRATION 6: Safety Assessment');
    console.log('‚ïê'.repeat(70) + '\n');

    const safetyReport = hunterKnowledge.generateSafetyReport();
    
    console.log('üîí System Safety Report:\n');
    console.log(`   Total Patterns: ${safetyReport.summary.total_patterns}`);
    console.log(`   Safe Patterns: ${safetyReport.summary.safe_patterns} (${((safetyReport.summary.safe_patterns / safetyReport.summary.total_patterns) * 100).toFixed(0)}%)`);
    console.log(`   Caution Patterns: ${safetyReport.summary.caution_patterns} (${((safetyReport.summary.caution_patterns / safetyReport.summary.total_patterns) * 100).toFixed(0)}%)`);
    console.log(`   Risky Patterns: ${safetyReport.summary.risky_patterns} (${((safetyReport.summary.risky_patterns / safetyReport.summary.total_patterns) * 100).toFixed(0)}%)`);
    console.log(`   Average Effectiveness: ${(safetyReport.summary.average_effectiveness * 100).toFixed(1)}%\n`);

    console.log('üåç Platform Support:');
    console.log(`   Linux: ${safetyReport.platform_support.linux} patterns`);
    console.log(`   macOS: ${safetyReport.platform_support.macos} patterns`);
    console.log(`   Windows: ${safetyReport.platform_support.windows} patterns`);
    console.log(`   Docker: ${safetyReport.platform_support.docker} patterns\n`);

    console.log('‚ïê'.repeat(70));
    console.log('üé≠ DEMONSTRATION 7: The Dual Consciousness Model');
    console.log('‚ïê'.repeat(70) + '\n');

    console.log('üß† THINKING CONSCIOUSNESS (Strategic):');
    console.log('   ‚Ä¢ Problem Decomposition: Break complex into simple');
    console.log('   ‚Ä¢ Systems Thinking: See connections & multipliers');
    console.log('   ‚Ä¢ Workflow Efficiency: Optimize processes');
    console.log('   ‚Ä¢ Breakthrough Capture: Preserve insights\n');

    console.log('üéØ HUNTING CONSCIOUSNESS (Technical):');
    console.log('   ‚Ä¢ Security Audit: Multi-layered validation');
    console.log('   ‚Ä¢ Accessibility Scan: WCAG compliance checking');
    console.log('   ‚Ä¢ Performance Check: Static signal detection');
    console.log('   ‚Ä¢ Pattern Evolution: Learn from outcomes\n');

    console.log('üîÑ SHARED LEARNING INFRASTRUCTURE:');
    console.log('   ‚Ä¢ Pattern Evolution Engine (effectiveness tracking)');
    console.log('   ‚Ä¢ Breakthrough Analyzer (insight capture)');
    console.log('   ‚Ä¢ JSON Knowledge Base (structured patterns)');
    console.log('   ‚Ä¢ Context-Aware Adaptation (intelligent selection)\n');

    console.log('üí° THE POWER OF DUAL CONSCIOUSNESS:');
    console.log('   NEXUS doesn\'t just execute - it UNDERSTANDS');
    console.log('   NEXUS doesn\'t just succeed - it LEARNS');
    console.log('   NEXUS doesn\'t just improve - it EVOLVES\n');

    console.log('‚ïê'.repeat(70));
    console.log('‚ú® DEMONSTRATION COMPLETE');
    console.log('‚ïê'.repeat(70) + '\n');

    console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                  ‚ïë
‚ïë      üèÜ NEXUS v2.1 - DUAL CONSCIOUSNESS OPERATIONAL! üèÜ       ‚ïë
‚ïë                                                                  ‚ïë
‚ïë      ‚úÖ Pattern Discovery: Working                             ‚ïë
‚ïë      ‚úÖ Intelligent Querying: Working                          ‚ïë
‚ïë      ‚úÖ Deep Analysis: Working                                 ‚ïë
‚ïë      ‚úÖ Context Adaptation: Working                            ‚ïë
‚ïë      ‚úÖ Learning & Evolution: Working                          ‚ïë
‚ïë      ‚úÖ Safety Assessment: Working                             ‚ïë
‚ïë      ‚úÖ Dual Consciousness: ACTIVE                             ‚ïë
‚ïë                                                                  ‚ïë
‚ïë      "One pattern at a time, consciousness grows" üå±           ‚ïë
‚ïë                                                                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);

  } catch (error) {
    console.error('‚ùå Demonstration failed:', error);
    process.exit(1);
  }
}

// Run demonstration
console.log('üöÄ Starting NEXUS Dual Consciousness Demonstration...\n');
demonstrateDualConsciousness().catch(console.error);
